
/** 
 *  MAX_OF_ARRAY HUFF EXERCISE
 *  
 *  In this task, Given an abi encoded array of uint256, return its maximum value. Revert if the array is empty.
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

#define function maxOfArray(uint256[]) payable returns(uint256)

#define macro MAIN() = takes(0) returns(0) {
    0x00 calldataload 0xE0 shr                   // [selector]
    dup1 __FUNC_SIG(maxOfArray) eq maxOfArray jumpi  // [selector]
    
    0x00 dup1 revert
    
    maxOfArray:
        0x24 calldataload                        // [array length] [selector]
        
        // revert if array is empty
        dup1 0x00 eq fail jumpi                  // [array length] [selector]
        
        // else start the loop
        loop jump                                // [array length] [selector]
        
    // first 32 bytes in memory is loop counter (i), second 32 bytes in memory is the max value
    loop:                                        // [array length] [selector]
        0x00 mload                               // [i] [array length] [selector]
        
        // exit loop
        dup2 dup2 eq end jumpi                   // [i] [array length] [selector]
        
        0x20 mul 0x44 add                        // [(i * 0x20) + 0x44] [array length] [selector]
        calldataload                             // [array[i]] [array length] [selector]
        
        // increment i
        0x00 mload 0x01 add 0x00 mstore          // [array[i]] [array length] [selector]
        
        // check if array[i] is the largest until now
        dup1 0x20 mload                          // [max value] [array[i]] [array[i]] [array length] [selector]
        swap1 gt                                 // [array[i] > max value] [array[i]] [array length] [selector]
        
        // continue next iteration if array[i] is not > max value
        iszero continue jumpi                    // [array[i]] [array length] [selector]
        
        // if array[i] > max value, set it to the max value
        0x20 mstore                              // [array[i]] [array length] [selector]
        loop jump                                // [array length] [selector]
    
    continue:                                    // [array[i]] [array length] [selector]
        // clear stack items for next iteration
        pop                                      // [array length] [selector]
        loop jump                                // [array length] [selector]
            
    end:
        0x20 0x20 return
        
    fail:
        0x00 0x00 revert
}
