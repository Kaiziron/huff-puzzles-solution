/** 
 *  BASIC_BANK HUFF EXERCISE
 *  
 *  The task is to create a basic bank with huff
 * functionalities include
 *      - depositing tokens via similar to how solidity's `receive` function works
 *      - withdrawing tokens
 *      - keeping track of and viewing balance
 */

#define function balanceOf(address) view returns(uint256)
#define function withdraw(uint256) payable returns()

#define macro MAIN() = takes(0) returns(0) {
    0x00 calldataload 0xE0 shr                   // [selector]
    dup1 __FUNC_SIG(balanceOf) eq balanceOf jumpi  // [selector]
    dup1 __FUNC_SIG(withdraw) eq withdraw jumpi  // [selector]
    
    caller sload                                 // [balance of caller] [selector]
    // add callvalue to caller balance
    callvalue add caller sstore                  // [selector]
    
    balanceOf:
        0x04 calldataload sload                  // [balance of address] [selector]
        0x00 mstore                              // [selector]
        0x20 0x00 return

    withdraw:
        caller sload                             // [balance of caller] [selector]
        0x04 calldataload                        // [amount] [balance of caller] [selector]
        // check if balance is enough
        dup2 dup2 gt                             // [amount > balance of caller] [amount] [balance of caller] [selector]
        fail jumpi                               // [amount] [balance of caller] [selector]
        
        // subtract caller balance
        dup1 swap2 sub caller sstore             // [amount] [selector]
        // send ether to caller
        0x00 dup1 dup1 dup1 swap4 caller gas call    // [amount] [selector]
        stop
    
    fail:
        0x00 0x00 revert     
}
